package com.clerk.passkeys

import com.clerk.network.ClerkApi
import com.clerk.network.model.deleted.DeletedObject
import com.clerk.network.model.error.ClerkErrorResponse
import com.clerk.network.model.verification.Verification
import com.clerk.network.serialization.ClerkResult
import kotlinx.serialization.Serializable

/** The verification strategy constant used for passkey verification. */
private const val PASSKEY_STRATEGY = "passkey"

/**
 * An object that represents a passkey associated with a user.
 *
 * Passkeys are a modern, secure authentication method that uses cryptographic key pairs to
 * authenticate users without requiring passwords. They provide a phishing-resistant authentication
 * experience using biometrics, device PINs, or other local authentication methods.
 */
@Serializable
data class Passkey(
  /** The unique identifier of the passkey. */
  val id: String,

  /** The passkey's name. */
  val name: String,

  /** The verification details for the passkey. */
  val verification: Verification? = null,

  /** The date when the passkey was created. */
  val createdAt: Long,

  /** The date when the passkey was last updated. */
  val updatedAt: Long,

  /** The date when the passkey was last used. */
  val lastUsedAt: Long? = null,
) {

  companion object {
    /**
     * Creates a new passkey for the current user or the user with the given session ID.
     *
     * Passkeys are a modern, secure authentication method that uses cryptographic key pairs. The
     * creation process will typically prompt the user to use their device's biometric
     * authentication (fingerprint, face recognition) or device PIN to create the passkey.
     *
     * @return A [ClerkResult] containing the created [Passkey] object on success, or a
     *   [ClerkErrorResponse] on failure
     */
    suspend fun create(): ClerkResult<Passkey, ClerkErrorResponse> {
      return PasskeyService.createPasskey()
    }
  }
}

/**
 * Updates the properties of this passkey.
 *
 * Currently supports updating the passkey's display name, which can help users identify and manage
 * their passkeys more easily.
 *
 * @param name The new name for the passkey, or null to keep the current name
 * @return A [ClerkResult] containing the updated [Passkey] on success, or a [ClerkErrorResponse] on
 *   failure
 */
suspend fun Passkey.update(name: String? = null): ClerkResult<Passkey, ClerkErrorResponse> {
  return ClerkApi.user.updatePasskey(passkeyId = this.id, name = name)
}

/**
 * Deletes this passkey from the user's account.
 *
 * This operation is irreversible. Once deleted, the passkey will no longer be available for
 * authentication and cannot be recovered. Users will need to create a new passkey if they want to
 * use passkey authentication again.
 *
 * @return A [ClerkResult] containing a [DeletedObject] on success, or a [ClerkErrorResponse] on
 *   failure
 */
suspend fun Passkey.delete(): ClerkResult<DeletedObject, ClerkErrorResponse> {
  return ClerkApi.user.deletePasskey(passkeyId = this.id)
}

/**
 * Attempts to verify this passkey using the provided public key credential.
 *
 * This method is used to complete the passkey verification process by submitting the cryptographic
 * response generated by the authenticator device.
 *
 * @param publicKeyCredential The JSON string containing the public key credential response from the
 *   WebAuthn authenticator
 * @return A [ClerkResult] containing the verified [Passkey] on success, or a [ClerkErrorResponse]
 *   on failure
 */
suspend fun Passkey.attemptVerification(
  publicKeyCredential: String
): ClerkResult<Passkey, ClerkErrorResponse> {
  return ClerkApi.user.attemptPasskeyVerification(
    passkeyId = this.id,
    strategy = PASSKEY_STRATEGY,
    publicKeyCredential = publicKeyCredential,
  )
}
