#!/bin/bash

######## FORMAT HOOK START ########

if [[ "$COMMIT_HOOK_OPT_OUT" == "true" ]]; then
    echo 'Warning: Skipping pre-commit hook because COMMIT_HOOK_OPT_OUT is true'
    exit
fi

# Previous opt-out and git config checks remain the same...
enabled="$(git config --bool hooks.pre-commit.enabled)"

if [[ "$enabled" == "false" ]]; then
    echo 'Warning: Skipping pre-commit hook...'
    exit
fi

# Colors and directory setup
RED='\033[0;31m'
NC='\033[0m' # No Color
REPO_ROOT_DIR="$(git rev-parse --show-toplevel)"

# Previous partially_staged_chksum function and original state storage remain the same...
function partially_staged_chksum() {
    staged_files=$(git diff --cached --name-only --diff-filter=ACMR "-G.*" | grep -Ei "(\.kt(s)?)|(.*java)$" | sort)
    unstaged_files=$(git diff --name-only --diff-filter=ACM | grep -Ei "(\.kt(s)?)|(.*java)$" | sort)
    comm -12 <(echo "$staged_files") <(echo "$unstaged_files") | xargs cksum
}

original_partially_staged_chksum=$(partially_staged_chksum)
original_partially_staged_filenames=$(echo "$original_partially_staged_chksum" | grep -oE '[^ ]+$')

# Sort Dependencies section remains the same...
kts_files_list="$(git diff --cached --name-only --diff-filter=ACMR "-G.*" | grep -Ei "build\.gradle\.kts$")"
if [[ ! -z ${kts_files_list} ]]; then
    kts_files_list="$(echo ${kts_files_list} | paste -sd " " -)"
    "${REPO_ROOT_DIR}/config/bin/sort-dependencies" ${kts_files_list} &> /dev/null
    if [[ $? != 0 ]]; then
        echo -e "${RED}sort-dependencies failed, re-running verbosely. Alternatively, you can run the command locally" >&2
        echo -e "Running format command: './config/bin/sort-dependencies --verbose ${kts_files_list}'${NC}" >&2
        "${REPO_ROOT_DIR}/config/bin/sort-dependencies --verbose" ${kts_files_list} >&2
        exit $?
    fi
fi

# Modified ktfmt and detekt section with proper checks
kotlin_files_list="$(git diff --cached --name-only --diff-filter=ACMR "-G.*"  | grep -Ei "\.kt(s)?$")"
if [[ ! -z ${kotlin_files_list} ]]; then
    # Run ktfmt only if there are Kotlin files
    kotlin_files_args="$(echo ${kotlin_files_list} | paste -sd " " -)"
    "${REPO_ROOT_DIR}/config/bin/ktfmt" --google-style ${kotlin_files_args} &> /dev/null
    if [[ $? != 0 ]]; then
        echo -e "${RED}Formatting failed, re-running verbosely. Alternatively, you can run the format command locally" >&2
        echo -e "Running format command: './config/bin/ktfmt --google-style ${kotlin_files_args}'${NC}" >&2
        "${REPO_ROOT_DIR}/config/bin/ktfmt" --google-style ${kotlin_files_args} >&2
        exit $?
    fi

    # Run detekt only if there are Kotlin files
    kotlin_files_detekt_args="$(echo $kotlin_files_list | tr " " ",")"
    if [[ ! -z ${kotlin_files_detekt_args} ]]; then
        "${REPO_ROOT_DIR}/config/bin/detekt-cli" --auto-correct \
            --baseline "${REPO_ROOT_DIR}/config/detekt/detekt-baseline.xml" \
            --config "${REPO_ROOT_DIR}/config/detekt/detekt.yml" \
            --build-upon-default-config \
            --input "${kotlin_files_detekt_args}" &> /dev/null

        if [[ $? != 0 ]]; then
            echo -e "${RED}Detekt failed, re-running verbosely. Alternatively, you can run the format command locally" >&2
            echo -e "Running format command: './config/bin/detekt-cli --auto-correct --baseline \"${REPO_ROOT_DIR}/config/detekt/detekt-baseline.xml\" --config \"${REPO_ROOT_DIR}/config/detekt/detekt.yml\" --build-upon-default-config --input ${kotlin_files_detekt_args}'${NC}" >&2
            "${REPO_ROOT_DIR}/config/bin/detekt-cli" --auto-correct \
                --baseline "${REPO_ROOT_DIR}/config/detekt/detekt-baseline.xml" \
                --config "${REPO_ROOT_DIR}/config/detekt/detekt.yml" \
                --build-upon-default-config \
                --build-upon-default-config \
                --input "${kotlin_files_detekt_args}" >&2
            exit $?
        fi
    fi
fi

# Re-stage modified files section
all_files="${kotlin_files_list}"
for file in ${all_files}; do
    if [[ -f ${file} && ! "${original_partially_staged_filenames}" == *"${file}"* ]]; then
        git add "${file}"
    fi
done

# Check for partially staged files section
modified_partially_staged_filenames=$(comm -13 \
  <(partially_staged_chksum) \
  <(echo "$original_partially_staged_chksum") |
  grep -oE '[^ ]+$')

modified_partially_staged_filenames=$(comm -12 \
  <(partially_staged_chksum | grep -oE '[^ ]+$') \
  <(echo "$modified_partially_staged_filenames"))

if [ -n "$modified_partially_staged_filenames" ]; then
  printf "%bCould not automatically add all fixed files to commit: some files had unstaged changes:%b\n" "$RED" "$NC"
  echo "$modified_partially_staged_filenames"
  echo "Manually stage the fixes that were just made and try again."
  exit 2
fi

######## FORMAT HOOK END ########