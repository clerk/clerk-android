name: Code Coverage

on:
  pull_request:
    branches: [ "main" ]

jobs:
  coverage:
    runs-on: macos-latest
    
    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'zulu'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Run tests and generate coverage report
      run: ./gradlew testDebugUnitTest jacocoRootReport

    - name: Generate Coverage Summary
      id: coverage
      run: |
        # Find the coverage XML file
        COVERAGE_FILE="build/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
        
        if [ -f "$COVERAGE_FILE" ]; then
          # Extract coverage percentages using grep and sed
          INSTRUCTION_COVERED=$(grep -o 'type="INSTRUCTION".*covered="[0-9]*"' "$COVERAGE_FILE" | sed 's/.*covered="\([0-9]*\)".*/\1/')
          INSTRUCTION_MISSED=$(grep -o 'type="INSTRUCTION".*missed="[0-9]*"' "$COVERAGE_FILE" | sed 's/.*missed="\([0-9]*\)".*/\1/')
          
          BRANCH_COVERED=$(grep -o 'type="BRANCH".*covered="[0-9]*"' "$COVERAGE_FILE" | sed 's/.*covered="\([0-9]*\)".*/\1/')
          BRANCH_MISSED=$(grep -o 'type="BRANCH".*missed="[0-9]*"' "$COVERAGE_FILE" | sed 's/.*missed="\([0-9]*\)".*/\1/')
          
          LINE_COVERED=$(grep -o 'type="LINE".*covered="[0-9]*"' "$COVERAGE_FILE" | sed 's/.*covered="\([0-9]*\)".*/\1/')
          LINE_MISSED=$(grep -o 'type="LINE".*missed="[0-9]*"' "$COVERAGE_FILE" | sed 's/.*missed="\([0-9]*\)".*/\1/')
          
          # Calculate percentages
          if [ -n "$INSTRUCTION_COVERED" ] && [ -n "$INSTRUCTION_MISSED" ]; then
            INSTRUCTION_TOTAL=$((INSTRUCTION_COVERED + INSTRUCTION_MISSED))
            if [ $INSTRUCTION_TOTAL -gt 0 ]; then
              INSTRUCTION_PERCENTAGE=$((INSTRUCTION_COVERED * 100 / INSTRUCTION_TOTAL))
            else
              INSTRUCTION_PERCENTAGE=0
            fi
          else
            INSTRUCTION_PERCENTAGE=0
          fi
          
          if [ -n "$BRANCH_COVERED" ] && [ -n "$BRANCH_MISSED" ]; then
            BRANCH_TOTAL=$((BRANCH_COVERED + BRANCH_MISSED))
            if [ $BRANCH_TOTAL -gt 0 ]; then
              BRANCH_PERCENTAGE=$((BRANCH_COVERED * 100 / BRANCH_TOTAL))
            else
              BRANCH_PERCENTAGE=0
            fi
          else
            BRANCH_PERCENTAGE=0
          fi
          
          if [ -n "$LINE_COVERED" ] && [ -n "$LINE_MISSED" ]; then
            LINE_TOTAL=$((LINE_COVERED + LINE_MISSED))
            if [ $LINE_TOTAL -gt 0 ]; then
              LINE_PERCENTAGE=$((LINE_COVERED * 100 / LINE_TOTAL))
            else
              LINE_PERCENTAGE=0
            fi
          else
            LINE_PERCENTAGE=0
          fi
          
          echo "instruction_coverage=$INSTRUCTION_PERCENTAGE" >> $GITHUB_OUTPUT
          echo "branch_coverage=$BRANCH_PERCENTAGE" >> $GITHUB_OUTPUT
          echo "line_coverage=$LINE_PERCENTAGE" >> $GITHUB_OUTPUT
          echo "coverage_file_exists=true" >> $GITHUB_OUTPUT
        else
          echo "Coverage file not found"
          echo "coverage_file_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: steps.coverage.outputs.coverage_file_exists == 'true'
      with:
        recreate: true
        message: |
          ## üìä Code Coverage Report
          
          | Coverage Type | Percentage |
          |---------------|------------|
          | **Instructions** | ${{ steps.coverage.outputs.instruction_coverage }}% |
          | **Branches** | ${{ steps.coverage.outputs.branch_coverage }}% |
          | **Lines** | ${{ steps.coverage.outputs.line_coverage }}% |
          
          Coverage reports are available in the workflow artifacts.
          
          ---
          *Coverage calculated by JaCoCo*

    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: |
          build/reports/jacoco/jacocoRootReport/
          source/build/reports/jacoco/jacocoTestReport/
        retention-days: 30

    - name: Coverage Check
      if: steps.coverage.outputs.coverage_file_exists == 'true'
      run: |
        INSTRUCTION_COVERAGE=${{ steps.coverage.outputs.instruction_coverage }}
        MINIMUM_COVERAGE=70
        
        if [ $INSTRUCTION_COVERAGE -lt $MINIMUM_COVERAGE ]; then
          echo "‚ùå Coverage ($INSTRUCTION_COVERAGE%) is below minimum threshold ($MINIMUM_COVERAGE%)"
          echo "Please add more tests to improve coverage."
          exit 1
        else
          echo "‚úÖ Coverage ($INSTRUCTION_COVERAGE%) meets minimum threshold ($MINIMUM_COVERAGE%)"
        fi