name: Code Coverage

on:
  pull_request:
    branches: [ "main" ]

jobs:
  coverage:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'zulu'
        cache: gradle

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Create local.properties
      run: |
        echo "sdk.dir=$ANDROID_HOME" > local.properties
        echo "ndk.dir=$ANDROID_HOME/ndk-bundle" >> local.properties
    
    - name: Run tests with coverage
      run: |
        echo "=== Running tests with coverage ==="
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "Available Android SDKs:"
        ls -la $ANDROID_HOME/platforms/ || echo "No platforms found"
        
        # Try to run tests with detailed output
        echo "Running unit tests..."
        if ./gradlew :source:testDebugUnitTest --stacktrace --info; then
          echo "‚úÖ Tests completed successfully"
        else
          echo "‚ùå Tests failed, checking if we can still generate coverage..."
          echo "Continuing to try coverage generation..."
        fi
        
        echo "Generating individual module coverage report..."
        if ./gradlew :source:jacocoTestReport --stacktrace --info; then
          echo "‚úÖ Individual coverage report generated"
        else
          echo "‚ùå Individual coverage report failed"
        fi
        
        echo "Generating root coverage report..."
        if ./gradlew jacocoRootReport --stacktrace --info; then
          echo "‚úÖ Root coverage report generated"
        else
          echo "‚ùå Root coverage report failed"
        fi

    - name: Debug coverage files after test run
      run: |
        echo "=== Post-test debugging ==="
        echo "Looking for execution data files..."
        find . -name "*.exec" -type f -ls || echo "No .exec files found"
        find . -name "*.ec" -type f -ls || echo "No .ec files found"
        
        echo "Looking for coverage reports..."
        find . -path "*/jacoco*" -name "*.xml" -type f -ls || echo "No XML reports found"
        find . -path "*/jacoco*" -name "*.html" -type f | head -5 || echo "No HTML reports found"
        
        echo "Build directories:"
        ls -la build/ 2>/dev/null || echo "No root build directory"
        ls -la source/build/ 2>/dev/null || echo "No source build directory"
        ls -la source/build/reports/ 2>/dev/null || echo "No source reports directory"
        ls -la source/build/reports/jacoco/ 2>/dev/null || echo "No source jacoco directory"
        
        echo "Test results:"
        ls -la source/build/test-results/ 2>/dev/null || echo "No test results directory"
        
        echo "Jacoco execution data locations:"
        ls -la source/build/jacoco/ 2>/dev/null || echo "No jacoco directory"
        ls -la source/build/outputs/unit_test_code_coverage/ 2>/dev/null || echo "No unit test coverage directory"

    - name: Generate Coverage Summary
      id: coverage
      run: |
        # Try multiple possible locations for coverage reports
        COVERAGE_FILES=(
          "build/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
          "source/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
        )
        
        COVERAGE_FILE=""
        for file in "${COVERAGE_FILES[@]}"; do
          if [ -f "$file" ]; then
            COVERAGE_FILE="$file"
            echo "Found coverage file: $COVERAGE_FILE"
            break
          fi
        done
        
        if [ -n "$COVERAGE_FILE" ] && [ -f "$COVERAGE_FILE" ]; then
          echo "Coverage file found! Content preview:"
          head -30 "$COVERAGE_FILE"
          echo "=== End of preview ==="
          
          # Extract coverage percentages using grep and sed
          INSTRUCTION_COVERED=$(grep -o 'type="INSTRUCTION".*covered="[0-9]*"' "$COVERAGE_FILE" | sed 's/.*covered="\([0-9]*\)".*/\1/')
          INSTRUCTION_MISSED=$(grep -o 'type="INSTRUCTION".*missed="[0-9]*"' "$COVERAGE_FILE" | sed 's/.*missed="\([0-9]*\)".*/\1/')
          
          BRANCH_COVERED=$(grep -o 'type="BRANCH".*covered="[0-9]*"' "$COVERAGE_FILE" | sed 's/.*covered="\([0-9]*\)".*/\1/')
          BRANCH_MISSED=$(grep -o 'type="BRANCH".*missed="[0-9]*"' "$COVERAGE_FILE" | sed 's/.*missed="\([0-9]*\)".*/\1/')
          
          LINE_COVERED=$(grep -o 'type="LINE".*covered="[0-9]*"' "$COVERAGE_FILE" | sed 's/.*covered="\([0-9]*\)".*/\1/')
          LINE_MISSED=$(grep -o 'type="LINE".*missed="[0-9]*"' "$COVERAGE_FILE" | sed 's/.*missed="\([0-9]*\)".*/\1/')
          
          echo "Raw coverage data:"
          echo "INSTRUCTION_COVERED: $INSTRUCTION_COVERED"
          echo "INSTRUCTION_MISSED: $INSTRUCTION_MISSED"
          echo "BRANCH_COVERED: $BRANCH_COVERED"
          echo "BRANCH_MISSED: $BRANCH_MISSED"
          echo "LINE_COVERED: $LINE_COVERED"
          echo "LINE_MISSED: $LINE_MISSED"
          
          # Calculate percentages
          if [ -n "$INSTRUCTION_COVERED" ] && [ -n "$INSTRUCTION_MISSED" ]; then
            INSTRUCTION_TOTAL=$((INSTRUCTION_COVERED + INSTRUCTION_MISSED))
            if [ $INSTRUCTION_TOTAL -gt 0 ]; then
              INSTRUCTION_PERCENTAGE=$((INSTRUCTION_COVERED * 100 / INSTRUCTION_TOTAL))
            else
              INSTRUCTION_PERCENTAGE=0
            fi
          else
            INSTRUCTION_PERCENTAGE=0
          fi
          
          if [ -n "$BRANCH_COVERED" ] && [ -n "$BRANCH_MISSED" ]; then
            BRANCH_TOTAL=$((BRANCH_COVERED + BRANCH_MISSED))
            if [ $BRANCH_TOTAL -gt 0 ]; then
              BRANCH_PERCENTAGE=$((BRANCH_COVERED * 100 / BRANCH_TOTAL))
            else
              BRANCH_PERCENTAGE=0
            fi
          else
            BRANCH_PERCENTAGE=0
          fi
          
          if [ -n "$LINE_COVERED" ] && [ -n "$LINE_MISSED" ]; then
            LINE_TOTAL=$((LINE_COVERED + LINE_MISSED))
            if [ $LINE_TOTAL -gt 0 ]; then
              LINE_PERCENTAGE=$((LINE_COVERED * 100 / LINE_TOTAL))
            else
              LINE_PERCENTAGE=0
            fi
          else
            LINE_PERCENTAGE=0
          fi
          
          echo "Calculated percentages:"
          echo "INSTRUCTION_PERCENTAGE: $INSTRUCTION_PERCENTAGE%"
          echo "BRANCH_PERCENTAGE: $BRANCH_PERCENTAGE%"
          echo "LINE_PERCENTAGE: $LINE_PERCENTAGE%"
          
          echo "instruction_coverage=$INSTRUCTION_PERCENTAGE" >> $GITHUB_OUTPUT
          echo "branch_coverage=$BRANCH_PERCENTAGE" >> $GITHUB_OUTPUT
          echo "line_coverage=$LINE_PERCENTAGE" >> $GITHUB_OUTPUT
          echo "coverage_file_exists=true" >> $GITHUB_OUTPUT
        else
          echo "Coverage file not found at any expected location"
          echo "Searching for any XML files with coverage data..."
          find . -name "*.xml" -type f -exec grep -l "type=\"INSTRUCTION\"" {} \; 2>/dev/null || echo "No XML files with coverage data found"
          echo "coverage_file_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: steps.coverage.outputs.coverage_file_exists == 'true'
      with:
        recreate: true
        message: |
          ## üìä Code Coverage Report
          
          | Coverage Type | Percentage |
          |---------------|------------|
          | **Instructions** | ${{ steps.coverage.outputs.instruction_coverage }}% |
          | **Branches** | ${{ steps.coverage.outputs.branch_coverage }}% |
          | **Lines** | ${{ steps.coverage.outputs.line_coverage }}% |
          
          Coverage reports are available in the workflow artifacts.
          
          ---
          *Coverage calculated by JaCoCo*

    - name: Add Debug Comment if Coverage Failed
      uses: marocchino/sticky-pull-request-comment@v2
      if: steps.coverage.outputs.coverage_file_exists != 'true'
      with:
        recreate: true
        message: |
          ## ‚ö†Ô∏è Coverage Report Generation Failed
          
          The coverage report could not be generated. This may be due to:
          - No tests running successfully
          - JaCoCo configuration issues
          - Missing coverage instrumentation
          
          Please check the workflow logs for more details.

    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: |
          build/reports/jacoco/jacocoRootReport/
          source/build/reports/jacoco/jacocoTestReport/
          source/build/test-results/
          source/build/jacoco/
        retention-days: 30

    - name: Coverage Check
      if: steps.coverage.outputs.coverage_file_exists == 'true'
      run: |
        INSTRUCTION_COVERAGE=${{ steps.coverage.outputs.instruction_coverage }}
        MINIMUM_COVERAGE=30
        
        if [ $INSTRUCTION_COVERAGE -lt $MINIMUM_COVERAGE ]; then
          echo "‚ùå Coverage ($INSTRUCTION_COVERAGE%) is below minimum threshold ($MINIMUM_COVERAGE%)"
          echo "Please add more tests to improve coverage."
          exit 1
        else
          echo "‚úÖ Coverage ($INSTRUCTION_COVERAGE%) meets minimum threshold ($MINIMUM_COVERAGE%)"
        fi