name: Code Coverage

on:
  pull_request:
    branches: [ "main" ]

jobs:
  coverage:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'zulu'
        cache: gradle

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Create local.properties
      run: |
        echo "sdk.dir=$ANDROID_HOME" > local.properties
        echo "ndk.dir=$ANDROID_HOME/ndk-bundle" >> local.properties
    
    - name: Run unit tests
      run: ./gradlew :source:testDebugUnitTest --stacktrace
    
    - name: Generate coverage report
      run: ./gradlew :source:jacocoTestReport --stacktrace
    
    - name: Generate root coverage report
      run: ./gradlew jacocoRootReport --stacktrace
    
    - name: Debug coverage files
      run: |
        echo "=== Looking for coverage files ==="
        find . -name "*.exec" -type f | head -10
        find . -name "*.xml" -path "*/jacoco*" -type f | head -10
        echo "=== Checking specific paths ==="
        ls -la build/reports/jacoco/jacocoRootReport/ || echo "Root report not found"
        ls -la source/build/reports/jacoco/jacocoTestReport/ || echo "Module report not found"
        
        # Show a sample of the XML content if it exists
        if [ -f "build/reports/jacoco/jacocoRootReport/jacocoRootReport.xml" ]; then
          echo "=== Root XML content sample ==="
          head -20 build/reports/jacoco/jacocoRootReport/jacocoRootReport.xml
        fi
        
        if [ -f "source/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml" ]; then
          echo "=== Module XML content sample ==="
          head -20 source/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
        fi
    
    - name: Calculate coverage from XML
      id: coverage
      run: |
        # Try to find the coverage XML file
        COVERAGE_XML=""
        if [ -f "build/reports/jacoco/jacocoRootReport/jacocoRootReport.xml" ]; then
          COVERAGE_XML="build/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
        elif [ -f "source/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml" ]; then
          COVERAGE_XML="source/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
        fi
        
        if [ -n "$COVERAGE_XML" ]; then
          echo "coverage_file_exists=true" >> $GITHUB_OUTPUT
          echo "coverage_xml_path=$COVERAGE_XML" >> $GITHUB_OUTPUT
          
          # Extract coverage percentages using grep and sed
          INSTRUCTION_COVERAGE=$(grep -o 'instruction[^>]*covered="[^"]*"[^>]*missed="[^"]*"' "$COVERAGE_XML" | head -1 | sed -E 's/.*covered="([^"]*)".*missed="([^"]*)".*/\1 \2/' | awk '{covered=$1; missed=$2; total=covered+missed; if(total>0) print int(covered*100/total); else print 0}')
          BRANCH_COVERAGE=$(grep -o 'branch[^>]*covered="[^"]*"[^>]*missed="[^"]*"' "$COVERAGE_XML" | head -1 | sed -E 's/.*covered="([^"]*)".*missed="([^"]*)".*/\1 \2/' | awk '{covered=$1; missed=$2; total=covered+missed; if(total>0) print int(covered*100/total); else print 0}')
          LINE_COVERAGE=$(grep -o 'line[^>]*covered="[^"]*"[^>]*missed="[^"]*"' "$COVERAGE_XML" | head -1 | sed -E 's/.*covered="([^"]*)".*missed="([^"]*)".*/\1 \2/' | awk '{covered=$1; missed=$2; total=covered+missed; if(total>0) print int(covered*100/total); else print 0}')
          
          echo "instruction_coverage=${INSTRUCTION_COVERAGE:-0}" >> $GITHUB_OUTPUT
          echo "branch_coverage=${BRANCH_COVERAGE:-0}" >> $GITHUB_OUTPUT
          echo "line_coverage=${LINE_COVERAGE:-0}" >> $GITHUB_OUTPUT
          
          echo "Coverage calculated:"
          echo "Instructions: ${INSTRUCTION_COVERAGE:-0}%"
          echo "Branches: ${BRANCH_COVERAGE:-0}%"
          echo "Lines: ${LINE_COVERAGE:-0}%"
        else
          echo "‚ùå No coverage XML file found"
          echo "coverage_file_exists=false" >> $GITHUB_OUTPUT
          echo "instruction_coverage=0" >> $GITHUB_OUTPUT
          echo "branch_coverage=0" >> $GITHUB_OUTPUT
          echo "line_coverage=0" >> $GITHUB_OUTPUT
        fi
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      if: steps.coverage.outputs.coverage_file_exists == 'true'
      with:
        name: jacoco-coverage-reports
        path: |
          build/reports/jacoco/
          source/build/reports/jacoco/
    
    - name: Comment PR with coverage
      uses: actions/github-script@v7
      if: steps.coverage.outputs.coverage_file_exists == 'true'
      with:
        script: |
          const instructionCoverage = ${{ steps.coverage.outputs.instruction_coverage }};
          const branchCoverage = ${{ steps.coverage.outputs.branch_coverage }};
          const lineCoverage = ${{ steps.coverage.outputs.line_coverage }};
          
          const coverageComment = `
          ## üìä Code Coverage Report
          
          | Metric | Coverage |
          |--------|----------|
          | Instructions | ${instructionCoverage}% |
          | Branches | ${branchCoverage}% |
          | Lines | ${lineCoverage}% |
          
          ${instructionCoverage >= 30 ? '‚úÖ' : '‚ùå'} **Overall Coverage**: ${instructionCoverage}%
          
          ---
          *Coverage report generated by JaCoCo*
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: coverageComment
          });
    
    - name: Coverage Check
      if: steps.coverage.outputs.coverage_file_exists == 'true'
      run: |
        INSTRUCTION_COVERAGE=${{ steps.coverage.outputs.instruction_coverage }}
        MINIMUM_COVERAGE=30
        
        if [ $INSTRUCTION_COVERAGE -lt $MINIMUM_COVERAGE ]; then
          echo "‚ùå Coverage ($INSTRUCTION_COVERAGE%) is below minimum threshold ($MINIMUM_COVERAGE%)"
          echo "Please add more tests to improve coverage."
          exit 1
        else
          echo "‚úÖ Coverage ($INSTRUCTION_COVERAGE%) meets minimum threshold ($MINIMUM_COVERAGE%)"
        fi