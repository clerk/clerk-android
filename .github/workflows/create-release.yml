name: Create Release

on:
  workflow_dispatch:  # Manual trigger only

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for changelog generation
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: Extract version from libs.versions.toml
      id: extract_version
      run: |
        VERSION=$(grep '^clerk-sdk' gradle/libs.versions.toml | sed 's/.*"\(.*\)".*/\1/')
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
        
    - name: Check if release exists
      id: check_release
      run: |
        if gh release view "v${{ steps.extract_version.outputs.VERSION }}" >/dev/null 2>&1; then
          echo "EXISTS=true" >> $GITHUB_OUTPUT
          echo "Release v${{ steps.extract_version.outputs.VERSION }} already exists"
        else
          echo "EXISTS=false" >> $GITHUB_OUTPUT
          echo "Release v${{ steps.extract_version.outputs.VERSION }} does not exist"
        fi
      env:
        GH_TOKEN: ${{ github.token }}
        
    - name: Update sdk-version.txt
      if: steps.check_release.outputs.EXISTS == 'false'
      run: |
        echo "${{ steps.extract_version.outputs.VERSION }}" > sdk-version.txt
        
    - name: Generate changelog
      if: steps.check_release.outputs.EXISTS == 'false'
      id: changelog
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$LATEST_TAG" ]; then
          # No previous tags, get all commits
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
        else
          # Get commits since latest tag
          CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse)
        fi
        
        if [ -z "$CHANGELOG" ]; then
          CHANGELOG="- Initial release"
        fi
        
        # Save changelog to file for multiline output
        echo "$CHANGELOG" > changelog.txt
        echo "Generated changelog:"
        cat changelog.txt
        
    - name: Build and test
      if: steps.check_release.outputs.EXISTS == 'false'
      run: ./gradlew build test
      
    - name: Create Git tag
      if: steps.check_release.outputs.EXISTS == 'false'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "v${{ steps.extract_version.outputs.VERSION }}" -m "Release v${{ steps.extract_version.outputs.VERSION }}"
        git push origin "v${{ steps.extract_version.outputs.VERSION }}"
        
    - name: Create GitHub Release
      if: steps.check_release.outputs.EXISTS == 'false'
      run: |
        gh release create "v${{ steps.extract_version.outputs.VERSION }}" \
          --title "Release v${{ steps.extract_version.outputs.VERSION }}" \
          --notes-file changelog.txt \
          --draft=false \
          --prerelease=false
      env:
        GH_TOKEN: ${{ github.token }}
        
    - name: Publish to Maven Central
      if: steps.check_release.outputs.EXISTS == 'false'
      env:
        ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
        ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
        ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{ secrets.SIGNING_KEY_ID }}
        ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.SIGNING_KEY }}
        ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.SIGNING_KEY_PASSWORD }}
      run: ./gradlew publishToMavenCentral --no-daemon --stacktrace
      
    - name: Comment on PR (if applicable)
      if: steps.check_release.outputs.EXISTS == 'false' && github.event_name == 'push'
      run: |
        echo "âœ… Release v${{ steps.extract_version.outputs.VERSION }} created and published to Maven Central!"
