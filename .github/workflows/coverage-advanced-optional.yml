name: Advanced Code Coverage

on:
  pull_request:
    branches: [ "main" ]

jobs:
  coverage:
    runs-on: macos-latest
    
    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'zulu'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Run tests and generate coverage report
      run: ./gradlew testDebugUnitTest jacocoRootReport

    - name: Generate Coverage Badge
      id: coverage-badge
      run: |
        # Find the coverage XML file
        COVERAGE_FILE="build/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
        
        if [ -f "$COVERAGE_FILE" ]; then
          # Extract instruction coverage
          INSTRUCTION_COVERED=$(grep -o 'type="INSTRUCTION".*covered="[0-9]*"' "$COVERAGE_FILE" | sed 's/.*covered="\([0-9]*\)".*/\1/')
          INSTRUCTION_MISSED=$(grep -o 'type="INSTRUCTION".*missed="[0-9]*"' "$COVERAGE_FILE" | sed 's/.*missed="\([0-9]*\)".*/\1/')
          
          if [ -n "$INSTRUCTION_COVERED" ] && [ -n "$INSTRUCTION_MISSED" ]; then
            INSTRUCTION_TOTAL=$((INSTRUCTION_COVERED + INSTRUCTION_MISSED))
            if [ $INSTRUCTION_TOTAL -gt 0 ]; then
              INSTRUCTION_PERCENTAGE=$((INSTRUCTION_COVERED * 100 / INSTRUCTION_TOTAL))
            else
              INSTRUCTION_PERCENTAGE=0
            fi
          else
            INSTRUCTION_PERCENTAGE=0
          fi
          
          # Generate badge color based on coverage
          if [ $INSTRUCTION_PERCENTAGE -ge 90 ]; then
            BADGE_COLOR="brightgreen"
          elif [ $INSTRUCTION_PERCENTAGE -ge 80 ]; then
            BADGE_COLOR="green"
          elif [ $INSTRUCTION_PERCENTAGE -ge 70 ]; then
            BADGE_COLOR="yellow"
          elif [ $INSTRUCTION_PERCENTAGE -ge 60 ]; then
            BADGE_COLOR="orange"
          else
            BADGE_COLOR="red"
          fi
          
          echo "coverage_percentage=$INSTRUCTION_PERCENTAGE" >> $GITHUB_OUTPUT
          echo "badge_color=$BADGE_COLOR" >> $GITHUB_OUTPUT
          echo "coverage_file_exists=true" >> $GITHUB_OUTPUT
        else
          echo "Coverage file not found"
          echo "coverage_file_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Coverage Report with Differential
      uses: madrapps/jacoco-report@v1.6.1
      if: steps.coverage-badge.outputs.coverage_file_exists == 'true'
      with:
        paths: |
          build/reports/jacoco/jacocoRootReport/jacocoRootReport.xml
          source/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
        token: ${{ secrets.GITHUB_TOKEN }}
        min-coverage-overall: 70
        min-coverage-changed-files: 80
        title: '📊 JaCoCo Coverage Report'
        update-comment: true
        pass-emoji: ':green_circle:'
        fail-emoji: ':red_circle:'

    - name: Add Detailed Coverage Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: steps.coverage-badge.outputs.coverage_file_exists == 'true'
      with:
        recreate: true
        message: |
          ## 📊 Code Coverage Report
          
          ![Coverage Badge](https://img.shields.io/badge/Coverage-${{ steps.coverage-badge.outputs.coverage_percentage }}%25-${{ steps.coverage-badge.outputs.badge_color }})
          
          ### 📈 Coverage Summary
          
          | Metric | Value |
          |--------|-------|
          | **Overall Coverage** | ${{ steps.coverage-badge.outputs.coverage_percentage }}% |
          | **Minimum Required** | 70% |
          | **Status** | ${{ steps.coverage-badge.outputs.coverage_percentage >= 70 && '✅ Passing' || '❌ Failing' }} |
          
          ### 📁 Coverage Reports
          
          - **Combined Report**: Available in workflow artifacts
          - **Module Reports**: Available in workflow artifacts
          - **HTML Reports**: Download artifacts to view detailed HTML reports
          
          ### 🎯 Coverage Guidelines
          
          - **Excellent**: 90%+ coverage
          - **Good**: 80%+ coverage  
          - **Acceptable**: 70%+ coverage
          - **Needs Improvement**: <70% coverage
          
          ---
          *Coverage calculated by JaCoCo • Updated automatically on each commit*

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      if: steps.coverage-badge.outputs.coverage_file_exists == 'true'
      with:
        files: ./build/reports/jacoco/jacocoRootReport/jacocoRootReport.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload Coverage Reports as Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: |
          build/reports/jacoco/jacocoRootReport/
          source/build/reports/jacoco/jacocoTestReport/
        retention-days: 30

    - name: Coverage Quality Gate
      if: steps.coverage-badge.outputs.coverage_file_exists == 'true'
      run: |
        COVERAGE=${{ steps.coverage-badge.outputs.coverage_percentage }}
        MINIMUM_COVERAGE=70
        
        echo "Current coverage: $COVERAGE%"
        echo "Minimum required: $MINIMUM_COVERAGE%"
        
        if [ $COVERAGE -lt $MINIMUM_COVERAGE ]; then
          echo "❌ Coverage ($COVERAGE%) is below minimum threshold ($MINIMUM_COVERAGE%)"
          echo "Please add more tests to improve coverage."
          echo "::error::Coverage check failed - $COVERAGE% is below required $MINIMUM_COVERAGE%"
          exit 1
        else
          echo "✅ Coverage ($COVERAGE%) meets minimum threshold ($MINIMUM_COVERAGE%)"
          echo "::notice::Coverage check passed - $COVERAGE% coverage achieved"
        fi